// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Processing state handling: displays error message, when there is an error in loading product 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getAction": [Function],
      "getActions": [Function],
      "getState": [Function],
      "isActionDispatched": [Function],
      "isActionTypeDispatched": [Function],
      "subscribe": [Function],
    }
  }
>
  <Product
    dispatch={
      [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
      }
    }
    product={
      Object {
        "data": Array [],
        "error": true,
        "loading": false,
      }
    }
  >
    <h1>
      Unable to load product.
    </h1>
  </Product>
</Provider>
`;

exports[`Processing state handling: displays loading spinner, when there is no error and product is loading from db 1`] = `
<Loading
  dispatch={[MockFunction]}
  product={
    Object {
      "data": Array [],
      "error": false,
      "loading": true,
    }
  }
>
  <Loading
    className="c-loading"
    color="#431048"
    delay={0}
    height={50}
    type="spin"
    width={50}
  >
    <div
      className="c-loading"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 32 32\\">
  <path opacity=\\".25\\" d=\\"M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4\\"/>
  <path d=\\"M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z\\">
    <animateTransform attributeName=\\"transform\\" type=\\"rotate\\" from=\\"0 16 16\\" to=\\"360 16 16\\" dur=\\"0.8s\\" repeatCount=\\"indefinite\\" />
  </path>
</svg>
",
        }
      }
      style={
        Object {
          "fill": "#431048",
          "height": 50,
          "width": 50,
        }
      }
    />
  </Loading>
</Loading>
`;

exports[`Processing state handling: displays relevant message, when product data is empty 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getAction": [Function],
      "getActions": [Function],
      "getState": [Function],
      "isActionDispatched": [Function],
      "isActionTypeDispatched": [Function],
      "subscribe": [Function],
    }
  }
>
  <Product
    dispatch={
      [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
      }
    }
    product={Object {}}
  >
    <h1>
      Unable to load product.
    </h1>
  </Product>
</Provider>
`;
